ipc.log("Starting...")

--------------------------------------------------------------------------------
-- Configuration

-- Display start-up banner for a duration, uncomment to enable
-- ipc.display("Throttle Manager for FSUIPC", 3)

throttles = {
  {
    {0x310A,0x310A,0x310B,0x310B},                                   -- Throttle disconnect offset
    {0x40,0x80,0x40,0x80},                                           -- Throttle disconnect mask
    0x3330,                                                          -- Throttle axis offset
    0x333A,                                                          -- Throttle limit offset
    0,                                                               -- Throttle limit override (J41 reads -4096, but it's really -16384), 0 to disable
    {65820,65821,65822,65823}, -- {0x088C,0x0924,0x09BC,0x0A54},     -- Throttle set offset or control (J41 needs control)
    1,                                                               -- Throttle toggle flag
    1,                                                               -- Throttle forward ratio
    1,                                                               -- Throttle reverse ratio
    0,                                                               -- Throttle toggle to forward on reverse greater than, 0 to disable
    0,                                                               -- Duration of display when throttle toggled, 0 to disable
    "#1 Forward Thrust",                                             -- Text to display when forward selected, "" to disable
    "#1 Reverse Thrust",                                             -- Text to display when reverse selected
    "#1 No Reverse Thrust",                                          -- Text to display when no reverse on aircraft
    0,                                                               -- Duration of display when throttle updated
    "#1 Forward Thrust: ",                                           -- Text to display when reverse set
    "#1 Reverse Thrust: ",                                           -- Text to display when forward set
    25,                                                              -- Volume of sounds when throttle toggled
    315,                                                             -- Position of sounds when throttle toggled
    "",                                                              -- Sound to play when forward selected
    "",                                                              -- Sound to play when reverse selected
    "",                                                              -- Sound to play when no reverse on aircraft or failed
	0x32F8,                                                          -- Reverser failed offset
	16,                                                              -- Reverser failed mask
	false,                                                           -- Starting state (true = reverse)
  },
}

throttles_aofs = {}
throttles_flag = {}

--------------------------------------------------------------------------------
-- Callbacks

function throttle_disconnect(time)
    for i=1,table.getn(throttles) do
		for j=1,table.getn(throttles[i][1]) do
			ipc.setbitsUB(throttles[i][1][j],throttles[i][2][j])
		end
    end
end

function throttle_toggle(flag)
    local i = throttles_flag[flag]
    local state = throttles[i][25]
    local limit = throttles[i][5]
    local msg = ""
    local snd = ""

    if (limit < 0) then
        if (state == true) then
            msg = throttles[i][12]
            snd = throttles[i][20]
			state = false
        else
            msg = throttles[i][13]
            snd = throttles[i][21]
			state = true
        end
    else
		msg = throttles[i][14]
		snd = throttles[i][22]
		state = false
    end
	
    if (throttles[i][11] > 0 and msg ~= "") then
        ipc.lineDisplay(msg, i)
    end
    if (throttles[i][18] > 0 and snd ~= "") then
        sound.play(snd, 0, throttles[i][18], throttles[i][19])
    end
	
	if (msg ~= "") then
		ipc.log(msg)
	end

	throttles[i][25] = state
	
	if (state == true) then
		throttle_update(throttles[i][3], 100)
	else
		throttle_update(throttles[i][3], 0)
	end
end

function throttle_update(aofs, aval)
	ipc.log(aval)
    local i = throttles_aofs[aofs]
    local limit = throttles[i][5]
    local sofs = throttles[i][6]
    local flag = throttles[i][7]
	local fofs = throttles[i][23]
	local fmsk = throttles[i][24]
    local state = throttles[i][25]
    local pval = throttles[i][26]
    local val = 0
    local msg = ""
    local pct = 0

    if (pval ~= nil) then
        -- sometimes the second "phantom" event is off by 1
        if ((aval >= pval - 1) and (aval <= pval + 1)) then
            return
        end
    end
    
    if (state == false) then
        val = math.floor(aval * throttles[i][8])
        pct = math.ceil(val * 100 / 16384)
        msg = throttles[i][16]
    else
		if (aval < 100) then
			aval = 100
		end
        val = math.ceil(aval * limit / 16384 * throttles[i][9])
        if (val < limit) then
            val = limit
        end
        if (val > throttles[i][10] and (pval == nil or val > pval)) then
			throttle_toggle(flag)
        end
        pct = math.floor(val * 100 / limit)
        msg = throttles[i][17]
    end

    throttles[i][26] = val

	local sofsn = table.getn(sofs)
	for si=1,sofsn do
		if (val >= 0 or logic.And(ipc.readUB(fofs), fmsk) == 0) then
			if (sofs[si] <= 65535) then
				ipc.writeSW(sofs[si], val)
			else
				ipc.control(sofs[si], val)
			end
		end
	end
	
    if (throttles[i][15] > 0 and msg ~= "") then
        ipc.lineDisplay(msg..pct.."% ", i)
    end    
end

--------------------------------------------------------------------------------
-- Main

sound.path("..\\Modules\\")

throttle_disconnect(0)
event.timer(5000, "throttle_disconnect")

local cn = table.getn(throttles)
local en = ipc.readSW(0xAEC) -- number of engines
if (cn > en) then
    cn = en
end
for i=1,cn do
    local aofs = throttles[i][3]
    local lofs = throttles[i][4]
    local limit = throttles[i][5]
    local flag = throttles[i][7]

    throttles[i][5] = ipc.readSW(lofs)
    if (limit < 0 and throttles[i][5] < 0) then
        throttles[i][5] = limit
    end
    
    throttles_aofs[aofs] = i
    throttles_flag[flag] = i

    event.offset(aofs, "SW", "throttle_update")
    event.flag(flag, "throttle_toggle")
end

ipc.log("Done.")
